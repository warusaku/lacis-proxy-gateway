# Caddyfile for LacisProxyGateway
# Version: 1.0.0
# Updated: 2025-07-31 - Support for akb001yebraxfqsm9y.dyndns-web.com

# グローバル設定
{
    admin localhost:2019
    log {
        output file /var/log/lpg/caddy.log
        format json
        level INFO
    }
}

# 共通のセキュリティヘッダー
(security_headers) {
    header {
        # XSS保護
        X-XSS-Protection "1; mode=block"
        
        # コンテンツタイプスニッフィング防止
        X-Content-Type-Options "nosniff"
        
        # クリックジャッキング防止
        X-Frame-Options "DENY"
        
        # リファラー制御
        Referrer-Policy "strict-origin-when-cross-origin"
        
        # コンテンツセキュリティポリシー
        Content-Security-Policy "default-src 'self'; script-src 'self' 'unsafe-inline' 'unsafe-eval'; style-src 'self' 'unsafe-inline'; img-src 'self' data: https:; font-src 'self' data:; connect-src 'self' wss: https:; frame-ancestors 'none'"
        
        # HSTS（HTTP Strict Transport Security）
        Strict-Transport-Security "max-age=31536000; includeSubDomains; preload"
        
        # 権限ポリシー
        Permissions-Policy "camera=(), microphone=(), geolocation=(), interest-cohort=()"
        
        # サーバー情報の隠蔽
        -Server
    }
}

# HTTPからHTTPSへのリダイレクト
:80 {
    # セキュリティヘッダーの適用
    import security_headers
    
    # すべてのHTTPトラフィックをHTTPSにリダイレクト
    redir https://{host}{uri} permanent
}

# メインのHTTPS設定
https://akb001yebraxfqsm9y.dyndns-web.com {
    # セキュリティヘッダーの適用
    import security_headers
    
    # TLS設定
    tls {
        # TLS 1.2以上のみ許可
        protocols tls1.2 tls1.3
    }
    
    # レート制限
    rate_limit {
        zone dynamic {
            key {remote_host}
            events 100
            window 1m
        }
    }
    
    # ルートパス - 既存のサービスに転送
    handle / {
        respond "Welcome to akb001yebraxfqsm9y.dyndns-web.com" 200
    }
    
    # /lacisstackパス - LacisStack関連サービス
    handle /lacisstack {
        respond "LacisStack Services" 200
    }
    
    # /lacisstack/boards - ホワイトボードアプリケーション
    handle /lacisstack/boards* {
        # パスのリライト
        uri strip_prefix /lacisstack/boards
        
        reverse_proxy 192.168.234.10:8080 {
            # ヘルスチェック
            health_uri /health
            health_interval 30s
            health_timeout 5s
            
            # ヘッダーの設定
            header_up Host {host}
            header_up X-Real-IP {remote_host}
            header_up X-Forwarded-For {remote_host}
            header_up X-Forwarded-Proto {scheme}
            header_up X-Forwarded-Prefix /lacisstack/boards
        }
    }
    
    # /lacisstack/boards/ws - WebSocket接続
    @websockets {
        header Connection *Upgrade*
        header Upgrade websocket
        path /lacisstack/boards/ws*
    }
    handle @websockets {
        uri strip_prefix /lacisstack/boards
        
        reverse_proxy 192.168.234.10:8081 {
            # WebSocket専用設定
            header_up Host {host}
            header_up X-Real-IP {remote_host}
            header_up X-Forwarded-For {remote_host}
            header_up X-Forwarded-Proto {scheme}
        }
    }
    
    # /lacisstack/api - APIサーバー
    handle /lacisstack/api* {
        uri strip_prefix /lacisstack/api
        
        reverse_proxy 192.168.234.11:3000 {
            # ヘルスチェック
            health_uri /health
            health_interval 30s
            health_timeout 5s
            
            # ヘッダーの設定
            header_up Host {host}
            header_up X-Real-IP {remote_host}
            header_up X-Forwarded-For {remote_host}
            header_up X-Forwarded-Proto {scheme}
            header_up X-API-Prefix /lacisstack/api
        }
    }
    
    # アクセスログ
    log {
        output file /var/log/lpg/access.log
        format json
    }
}

# ワイルドカードサブドメイン対応
*.akb001yebraxfqsm9y.dyndns-web.com {
    # セキュリティヘッダーの適用
    import security_headers
    
    # デフォルトレスポンス
    respond "Subdomain not configured" 404
}

# 管理UI用のHTTPS設定（ローカルアクセスのみ）
:8443 {
    # セキュリティヘッダーの適用
    import security_headers
    
    # 管理UIへのリバースプロキシ
    reverse_proxy localhost:8080 {
        # ヘルスチェック
        health_uri /api/v1/health
        health_interval 30s
        health_timeout 5s
        
        # タイムアウト設定
        transport http {
            dial_timeout 5s
            response_header_timeout 5s
        }
    }
    
    # 静的ファイルの配信
    handle /static/* {
        root * /var/www/lpg
        file_server
    }
    
    # WebSocket対応
    @websockets {
        header Connection *Upgrade*
        header Upgrade websocket
    }
    reverse_proxy @websockets localhost:8080
    
    # ログ記録
    log {
        output file /var/log/lpg/admin-access.log
        format json
    }
}