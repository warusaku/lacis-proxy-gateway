# Telegraf Configuration for LacisProxyGateway
# Version: 1.0.0

# Global tags can be specified here in key="value" format.
[global_tags]
  host = "$HOSTNAME"
  service = "lacis-proxy-gateway"

# Configuration for telegraf agent
[agent]
  ## Default data collection interval for all inputs
  interval = "10s"
  
  ## Rounds collection interval to 'interval'
  round_interval = true
  
  ## Telegraf will send metrics to outputs in batches of at most metric_batch_size metrics.
  metric_batch_size = 1000
  
  ## Maximum number of unwritten metrics per output.
  metric_buffer_limit = 10000
  
  ## Collection jitter is used to jitter the collection by a random amount.
  collection_jitter = "0s"
  
  ## Default flushing interval for all outputs.
  flush_interval = "10s"
  
  ## Jitter the flush interval by a random amount.
  flush_jitter = "0s"
  
  ## Logging configuration:
  debug = false
  quiet = false
  logfile = "/var/log/lpg/telegraf.log"
  
  ## Override default hostname, if empty use os.Hostname()
  hostname = ""
  
  ## If set to true, do no set the "host" tag in the telegraf agent.
  omit_hostname = false

###############################################################################
#                            OUTPUT PLUGINS                                   #
###############################################################################

# Send metrics to LPG log endpoint
[[outputs.http]]
  ## URL is the address to send metrics to
  url = "${LOG_ENDPOINT}/metrics"
  
  ## Timeout for HTTP message
  timeout = "5s"
  
  ## HTTP method, one of: "POST" or "PUT"
  method = "POST"
  
  ## HTTP Basic Auth
  # username = "username"
  # password = "pa$$word"
  
  ## Optional TLS Config
  # tls_ca = "/etc/telegraf/ca.pem"
  # tls_cert = "/etc/telegraf/cert.pem"
  # tls_key = "/etc/telegraf/key.pem"
  
  ## Data format to output.
  data_format = "json"
  
  ## Additional HTTP headers
  [outputs.http.headers]
    Content-Type = "application/json"
    X-Service = "LPG-Telegraf"

# # Send metrics to file for debugging
# [[outputs.file]]
#   files = ["/var/log/lpg/telegraf-metrics.log"]
#   data_format = "json"

###############################################################################
#                            INPUT PLUGINS                                    #
###############################################################################

# Read metrics about cpu usage
[[inputs.cpu]]
  ## Whether to report per-cpu stats or not
  percpu = true
  ## Whether to report total system cpu stats or not
  totalcpu = true
  ## If true, collect raw CPU time metrics
  collect_cpu_time = false
  ## If true, compute and report the sum of all non-idle CPU states
  report_active = false

# Read metrics about disk usage by mount point
[[inputs.disk]]
  ## By default stats will be gathered for all mount points.
  ## Set mount_points will restrict the stats to only the specified mount points.
  # mount_points = ["/"]
  
  ## Ignore mount points by filesystem type.
  ignore_fs = ["tmpfs", "devtmpfs", "devfs", "iso9660", "overlay", "aufs", "squashfs"]

# Read metrics about disk IO by device
[[inputs.diskio]]
  ## By default, telegraf will gather stats for all devices including
  ## disk partitions.
  ## Setting devices will restrict the stats to the specified devices.
  # devices = ["sda", "sdb"]

# Get kernel statistics from /proc/stat
[[inputs.kernel]]
  # no configuration

# Read metrics about memory usage
[[inputs.mem]]
  # no configuration

# Get the number of processes and group them by status
[[inputs.processes]]
  # no configuration

# Read metrics about swap memory usage
[[inputs.swap]]
  # no configuration

# Read metrics about system load & uptime
[[inputs.system]]
  ## Uncomment to remove deprecated metrics.
  # fielddrop = ["uptime_format"]

# Read metrics about network interface usage
[[inputs.net]]
  ## By default, telegraf gathers stats from any up interface (excluding loopback)
  ## Setting interfaces will tell it to gather these explicit interfaces,
  ## regardless of status.
  # interfaces = ["eth0"]
  
  ## On linux systems telegraf also collects protocol stats.
  ## Setting ignore_protocol_stats to true will skip reporting of protocol metrics.
  # ignore_protocol_stats = false

# Read TCP metrics such as established, time wait and sockets counts.
[[inputs.netstat]]
  # no configuration

# Monitor process cpu and memory usage
[[inputs.procstat]]
  ## PID file to monitor process
  pid_file = "/var/run/lpg/lpg-api.pid"
  
  ## executable name (ie, pgrep <exe>)
  # exe = "lpg-api"
  
  ## pattern as argument for pgrep (ie, pgrep -f <pattern>)
  pattern = "lpg-api"
  
  ## user as argument for pgrep (ie, pgrep -u <user>)
  # user = "lpg"
  
  ## Systemd unit name
  # systemd_unit = "lpg.service"
  
  ## CGroup name or path
  # cgroup = "systemd/system.slice/lpg.service"

# Monitor Caddy process
[[inputs.procstat]]
  pattern = "caddy"

# Monitor vsftpd process
[[inputs.procstat]]
  pattern = "vsftpd"

# Read metrics from Caddy admin API
[[inputs.http]]
  ## One or more URLs from which to read formatted metrics
  urls = ["http://localhost:2019/metrics"]
  
  ## HTTP method
  method = "GET"
  
  ## Optional HTTP headers
  # headers = {"X-Special-Header" = "Special-Value"}
  
  ## HTTP entity-body to send with POST/PUT requests.
  # body = ""
  
  ## HTTP Content-Type to send with POST/PUT requests.
  # content_type = "text/plain"
  
  ## Optional file with Bearer token
  ## file content is added as an Authorization header
  # bearer_token = "/path/to/file"
  
  ## Optional HTTP Basic Auth Credentials
  # username = "username"
  # password = "pa$$word"
  
  ## HTTP Proxy support
  # use_system_proxy = false
  # http_proxy_url = ""
  
  ## Optional TLS Config
  # tls_ca = "/etc/telegraf/ca.pem"
  # tls_cert = "/etc/telegraf/cert.pem"
  # tls_key = "/etc/telegraf/key.pem"
  
  ## Timeout for HTTP requests
  timeout = "5s"
  
  ## Data format to consume.
  data_format = "prometheus"

# Parse LPG access logs
[[inputs.tail]]
  ## File to tail
  files = ["/var/log/lpg/access.log"]
  
  ## Read file from beginning.
  from_beginning = false
  
  ## Whether file is a named pipe
  pipe = false
  
  ## Method used to watch for file updates.
  watch_method = "inotify"
  
  ## Data format to consume.
  data_format = "json"
  
  ## Tag keys is an array of keys that should be added as tags.
  tag_keys = ["host", "method", "status", "sitename"]
  
  ## Override the base name of the measurement
  name_override = "lpg_access_log"

# Monitor file sizes
[[inputs.filestat]]
  ## Files to gather stats about.
  files = [
    "/etc/lpg/config.json",
    "/var/log/lpg/*.log"
  ]
  
  ## If true, read the entire file and calculate an md5 checksum.
  md5 = false

# Execute custom scripts
[[inputs.exec]]
  ## Commands array
  commands = [
    "/usr/local/bin/lpg-health-check.sh"
  ]
  
  ## Timeout for each command to complete.
  timeout = "5s"
  
  ## measurement name suffix (for separating different commands)
  name_suffix = "_health"
  
  ## Data format to consume.
  data_format = "json" 