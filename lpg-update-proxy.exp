#!/usr/bin/expect -f
# Update LPG proxy to handle missing target

set timeout 300
set host "192.168.234.2"
set root_pass "orangepi"

puts "=== Updating LPG Proxy ==="

spawn ssh root@$host
expect "password:"
send "$root_pass\r"
expect "# "

# Kill existing proxy
send "pkill -f simple-proxy.py\r"
expect "# "

# Create improved proxy
send "cat > /home/lacissystem/lpg-proxy.py << 'EOF'\r"
send "#!/usr/bin/env python3\r"
send "from http.server import HTTPServer, BaseHTTPRequestHandler\r"
send "import urllib.request\r"
send "import urllib.error\r"
send "import json\r"
send "\r"
send "class LPGProxyHandler(BaseHTTPRequestHandler):\r"
send "    def do_GET(self):\r"
send "        if self.path == '/health':\r"
send "            self.send_response(200)\r"
send "            self.send_header('Content-type', 'application/json')\r"
send "            self.end_headers()\r"
send "            status = {\r"
send "                'status': 'healthy',\r"
send "                'service': 'LPG Proxy Gateway',\r"
send "                'version': '1.0',\r"
send "                'routes': [\r"
send "                    '/lacisstack/boards -> 192.168.234.10:8080'\r"
send "                ]\r"
send "            }\r"
send "            self.wfile.write(json.dumps(status).encode())\r"
send "        elif self.path.startswith('/lacisstack/boards'):\r"
send "            # Try to forward to Orange Pi 5 Plus\r"
send "            target_path = self.path.replace('/lacisstack/boards', '')\r"
send "            if not target_path:\r"
send "                target_path = '/'\r"
send "            target_url = f'http://192.168.234.10:8080{target_path}'\r"
send "            \r"
send "            try:\r"
send "                # Attempt to forward request\r"
send "                req = urllib.request.Request(target_url)\r"
send "                # Copy headers\r"
send "                for header in self.headers:\r"
send "                    if header.lower() not in ['host']:\r"
send "                        req.add_header(header, self.headers[header])\r"
send "                req.add_header('X-Forwarded-For', self.client_address[0])\r"
send "                req.add_header('X-Forwarded-Host', self.headers.get('Host', ''))\r"
send "                req.add_header('X-Forwarded-Prefix', '/lacisstack/boards')\r"
send "                \r"
send "                with urllib.request.urlopen(req, timeout=5) as response:\r"
send "                    self.send_response(response.getcode())\r"
send "                    for header, value in response.headers.items():\r"
send "                        self.send_header(header, value)\r"
send "                    self.end_headers()\r"
send "                    self.wfile.write(response.read())\r"
send "            except (urllib.error.URLError, ConnectionRefusedError) as e:\r"
send "                # Target not available\r"
send "                self.send_response(503)\r"
send "                self.send_header('Content-type', 'text/html')\r"
send "                self.end_headers()\r"
send "                error_html = f'''\r"
send "<html>\r"
send "<head><title>LPG Proxy - Service Unavailable</title></head>\r"
send "<body>\r"
send "<h1>LPG Proxy Gateway</h1>\r"
send "<h2>Target Service Unavailable</h2>\r"
send "<p>Unable to connect to: {target_url}</p>\r"
send "<p>Error: {str(e)}</p>\r"
send "<hr>\r"
send "<p>Route: /lacisstack/boards â†’ 192.168.234.10:8080</p>\r"
send "<p>This demonstrates that LPG is correctly routing the request.</p>\r"
send "</body>\r"
send "</html>\r"
send "'''\r"
send "                self.wfile.write(error_html.encode())\r"
send "        else:\r"
send "            self.send_response(200)\r"
send "            self.send_header('Content-type', 'text/html')\r"
send "            self.end_headers()\r"
send "            self.wfile.write(b'<h1>LPG Proxy Gateway</h1><p>Ready</p>')\r"
send "\r"
send "if __name__ == '__main__':\r"
send "    server = HTTPServer(('0.0.0.0', 80), LPGProxyHandler)\r"
send "    print('LPG Proxy listening on port 80')\r"
send "    server.serve_forever()\r"
send "EOF\r"
expect "# "

# Make executable and run on port 80
send "chmod +x /home/lacissystem/lpg-proxy.py\r"
expect "# "

send "nohup python3 /home/lacissystem/lpg-proxy.py > /var/log/lpg-proxy.log 2>&1 &\r"
expect "# "

# Check status
send "sleep 2\r"
expect "# "
send "netstat -tlnp | grep :80\r"
expect "# "

# Test health endpoint
send "curl -s http://localhost/health | python3 -m json.tool\r"
expect "# "

send "exit\r"
expect eof

puts "\n=== LPG Proxy Updated ==="
puts "Proxy now running on port 80 with proper error handling"