# Dockerfile.dev - Development Environment
# Version: 1.0.0

# Stage 1: Go開発環境
FROM golang:1.21-alpine AS development

# 必要なパッケージをインストール
RUN apk add --no-cache git make

# Airのインストール（ホットリロード）
RUN go install github.com/cosmtrek/air@latest

# 作業ディレクトリ
WORKDIR /app

# Go モジュールファイルをコピー
COPY go.mod go.sum ./
RUN go mod download

# ソースコードをマウント（docker-compose.ymlでvolume設定）
# COPY . .

# Air設定ファイル
RUN echo '[build]\n\
  cmd = "go build -o ./tmp/main ./main.go"\n\
  bin = "tmp/main"\n\
  full_bin = "./tmp/main"\n\
  include_ext = ["go", "tpl", "tmpl", "html"]\n\
  exclude_dir = ["assets", "tmp", "vendor", "frontend", "node_modules"]\n\
  include_dir = []\n\
  exclude_file = []\n\
  delay = 1000\n\
  stop_on_error = true\n\
  log = "air_errors.log"\n\
  \n\
[color]\n\
  main = "magenta"\n\
  watcher = "cyan"\n\
  build = "yellow"\n\
  runner = "green"\n\
  \n\
[log]\n\
  time = true' > .air.toml

EXPOSE 8443

# デフォルトコマンド
CMD ["air"]

# Stage 2: Node.js開発環境
FROM node:20-alpine AS web-dev

# pnpmのインストール
RUN npm install -g pnpm

WORKDIR /app

# package.jsonをコピー
COPY package.json pnpm-lock.yaml* ./
RUN pnpm install

# ソースコードはdocker-compose.ymlでマウント

EXPOSE 5173

CMD ["pnpm", "run", "dev"] 